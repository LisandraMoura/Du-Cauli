import os
import shutil
import uuid
import json
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from pydub import AudioSegment
from googleapiclient.discovery import build
from google.oauth2.service_account import Credentials
from googleapiclient.http import MediaIoBaseDownload
from src.processa_audios import transcrever_audio
from src.gera_excel import formatar_transcricao_para_csv
import ssl
import certifi

# Configura√ß√£o de SSL
ssl._create_default_https_context = ssl.create_default_context(cafile=certifi.where())

google_credentials = st.secrets["GOOGLE_CREDENTIALS"]
# Transformar em dicion√°rio, se necess√°rio
google_credentials_dict = dict(google_credentials)

GOOGLE_DRIVE_FOLDER_ID = '14Qoy_hf7r6Qh2Rwng97pYMcFu7rf3eqY'


## LOCAL ##
# # Configura√ß√µes do Google Drive
# CREDENTIALS_FILE = 'pdm-class-2024-ba9afd8b5e2d.json'
# SCOPES = ['https://www.googleapis.com/auth/drive']

# @st.cache_resource
# def create_drive_service():
#     """Cria o servi√ßo para conectar ao Google Drive."""
#     try:
#         credentials = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
#         service = build('drive', 'v3', credentials=credentials)
#         return service
#     except Exception as e:
#         st.error(f"Erro ao conectar ao Google Drive: {e}")
#         return None
    
@st.cache_resource
def create_drive_service():
    """Cria o servi√ßo para conectar ao Google Drive."""
    try:
        # Usar as credenciais do dicion√°rio
        credentials = Credentials.from_service_account_info(google_credentials_dict)
        service = build('drive', 'v3', credentials=credentials)
        return service
    except Exception as e:
        st.error(f"Erro ao conectar ao Google Drive: {e}")
        return None

def list_files_in_folder(service, folder_id):
    """Lista os arquivos em uma pasta espec√≠fica do Google Drive."""
    try:
        query = f"'{folder_id}' in parents"
        results = service.files().list(q=query, fields="files(id, name)").execute()
        return results.get('files', [])
    except Exception as e:
        st.error(f"Erro ao listar arquivos na pasta: {e}")
        return []

def download_file(service, file_id, destination):
    """Baixa um arquivo do Google Drive."""
    try:
        request = service.files().get_media(fileId=file_id)
        with open(destination, "wb") as f:
            downloader = MediaIoBaseDownload(f, request)
            done = False
            while not done:
                status, done = downloader.next_chunk()
        return destination
    except Exception as e:
        st.error(f"Erro ao baixar arquivo: {e}")
        return None

# Criar servi√ßo do Google Drive
service = create_drive_service()

# Interface Streamlit
st.title("Du-CauLi Assistente de Voz")

st.write("Imagine substituir o caderninho amassado e as planilhas manuais por uma solu√ß√£o simples, r√°pida e escal√°vel: um assistente de √°udio para pesquisadores de campo. Com nosso dispositivo IoT, basta gravar suas observa√ß√µes em √°udio, mesmo sem conex√£o. Assim que voc√™ estiver online, nossa tecnologia converte automaticamente esses √°udios em planilhas digitais completas, com todas as vari√°veis j√° organizadas. √â menos tempo perdido com transcri√ß√£o manual e mais foco no que realmente importa: a pesquisa. Onde houver algu√©m coletando dados ‚Äî na cidade, no cerrado ou no deserto ‚Äî nossa solu√ß√£o se adapta e agiliza o trabalho.")
st.write("##### Bem-vindo a um futuro de coleta de dados em campo mais √°gil, inteligente e sem complica√ß√µes.")


# Menu de navega√ß√£o
opcao = st.selectbox("Lista de ferramentas dispon√≠veis: ", ["Processador de √°udio", "An√°lise de dados"])

if opcao == "Processador de √°udio":
    # Upload de arquivos locais
    st.write("### Arquivos Locais")
    arquivos_locais = st.file_uploader(
        "Selecione os arquivos de √°udio locais", 
        type=["m4a", "mp3", "wav"], 
        accept_multiple_files=True
    )

    # Sele√ß√£o de arquivos do Google Drive
    arquivos_drive = []
    if service:
        st.write("### Arquivos Remotos")
        arquivos_drive_disponiveis = list_files_in_folder(service, GOOGLE_DRIVE_FOLDER_ID)
        arquivos_drive = st.multiselect(
            "Selecione os arquivos de √°udio do Google Drive:",
            arquivos_drive_disponiveis,
            format_func=lambda x: x['name']
        )
        baixar_todos = st.checkbox("Selecionar todos os arquivos da pasta")

    # Processar arquivos selecionados
    if st.button("Gerar Planilha"):
        if not arquivos_locais and not arquivos_drive and not baixar_todos:
            st.error("Por favor, envie arquivos locais ou selecione arquivos do Google Drive.")
        else:
            # Criar pasta tempor√°ria
            pasta_temporaria = "temp_audios"
            os.makedirs(pasta_temporaria, exist_ok=True)
            caminhos_audios = []

            # Salvar arquivos locais
            if arquivos_locais:
                count0 = 0
                st.write("### Processando arquivos locais...")
                for arquivo in arquivos_locais:
                    unique_name = f"{uuid.uuid4()}_{arquivo.name}"
                    caminho_arquivo = os.path.join(pasta_temporaria, unique_name)
                    with open(caminho_arquivo, "wb") as f:
                        f.write(arquivo.read())
                    caminhos_audios.append(caminho_arquivo)
                    count0 += 1
                    # st.write(f"‚úÖ Arquivo local salvo: {unique_name}")
                st.write(f"‚úÖ Total √°udios salvos: {count0}")

            # Baixar todos os arquivos da pasta do Google Drive
            if baixar_todos:
                count = 0
                st.write("### Processando arquivos remotos...")
                for arquivo in arquivos_drive_disponiveis:
                    destino = os.path.join(pasta_temporaria, arquivo['name'])
                    caminho_arquivo = download_file(service, arquivo['id'], destino)
                    if caminho_arquivo:
                        caminhos_audios.append(caminho_arquivo)
                        count += 1
                        # st.write(f"‚úÖ Arquivo baixado do Google Drive: {arquivo['name']}")
                st.write(f"‚úÖ Total √°udios salvos: {count}")


            # Baixar arquivos do Google Drive
            if arquivos_drive and not baixar_todos:
                count2 = 0
                st.write("### Processando arquivos remotos...")
                for arquivo in arquivos_drive:
                    destino = os.path.join(pasta_temporaria, arquivo['name'])
                    caminho_arquivo = download_file(service, arquivo['id'], destino)
                    if caminho_arquivo:
                        caminhos_audios.append(caminho_arquivo)
                        count2 += 1
                        # st.write(f"‚úÖ Arquivo baixado do Google Drive: {arquivo['name']}")
                st.write(f"‚úÖ Total √°udios salvos: {count2}")

            # Concatenar todos os √°udios
            if caminhos_audios:
                st.write("üîÑ Gerando...")
                caminho_audio_concatenado = os.path.join("dados_transcritos", "audio_concatenado.mp3")
                os.makedirs("dados_transcritos", exist_ok=True)
                audio_final = AudioSegment.empty()
                for caminho in caminhos_audios:
                    audio = AudioSegment.from_file(caminho)
                    audio_final += audio
                audio_final.export(caminho_audio_concatenado, format="mp3")
                st.success(f"√Åudio concatenado!")

                # Processar o √°udio concatenado
                try:
                    st.write("üîÑ Transcrevendo o √°udio...")
                    transcricao = transcrever_audio(caminho_audio_concatenado)
                    st.text_area("üìù Transcri√ß√£o:", transcricao, height=200)

                    # Salvar transcri√ß√£o como CSV
                    caminho_csv = os.path.join("dados_transcritos", "transcricao_concatenado.csv")
                    formatar_transcricao_para_csv(transcricao, caminho_csv)
                    # st.success(f"Transcri√ß√£o salva em CSV: {caminho_csv}")
                    st.success(f"CSV gerado com sucesso! Agora, basta baixar o csv ou visualizar os dados em 'An√°lise de dados'.")

                    # Bot√£o para download do CSV
                    with open(caminho_csv, "rb") as f:
                        st.download_button(
                            label="Baixar CSV",
                            data=f,
                            file_name="transcricao_concatenado.csv",
                            mime="text/csv"
                        )
                except Exception as e:
                    st.error(f"Erro ao processar o √°udio: {e}")

            # Limpar pasta tempor√°ria
            shutil.rmtree(pasta_temporaria)
            st.write("üßπ Pasta tempor√°ria limpa.")

elif opcao == "An√°lise de dados":
    st.write("### Fa√ßa o upload do CSV gerado para an√°lise dos dados ou use o arquivo gerado anteriormente")
    opcao_csv = st.radio("Como voc√™ deseja fornecer o CSV?", ["Upload de Arquivo", "CSV gerado"])

    if opcao_csv == "Upload de Arquivo":
        arquivo_csv = st.file_uploader("Envie o arquivo CSV", type=["csv"])
        if arquivo_csv is not None:
            df = pd.read_csv(arquivo_csv)
    elif opcao_csv == "CSV gerado":
        caminho_csv_existente = os.path.join("dados_transcritos", "transcricao_concatenado.csv")
        if os.path.exists(caminho_csv_existente):
            df = pd.read_csv(caminho_csv_existente)
            st.success(f"Usando o arquivo existente: {caminho_csv_existente}")
        else:
            st.error("Erro: Arquivo CSV n√£o encontrado. Primeiro, processe o √°udio para gerar o CSV.")
            df = None

    if 'df' in locals() and df is not None:
        st.write("### Dados Extra√≠dos")
        st.dataframe(df)

        # Gr√°fico 1: Histograma das Alturas
        st.write("### Distribui√ß√£o das Alturas")
        plt.figure()
        plt.hist(df['altura'].astype(float), bins=10, edgecolor='black')
        plt.xlabel('Altura')
        plt.ylabel('Frequ√™ncia')
        plt.title('Histograma das Alturas')
        st.pyplot(plt)

        # Gr√°fico 2: Histograma dos Di√¢metros
        st.write("### Distribui√ß√£o dos Di√¢metros")
        plt.figure()
        plt.hist(df['di√¢metro'].astype(float), bins=10, edgecolor='black')
        plt.xlabel('Di√¢metro')
        plt.ylabel('Frequ√™ncia')
        plt.title('Histograma dos Di√¢metros')
        st.pyplot(plt)

        # Gr√°fico 3: Gr√°fico de Dispers√£o entre Altura e Di√¢metro
        st.write("### Rela√ß√£o entre Altura e Di√¢metro")
        plt.figure()
        plt.scatter(df['altura'].astype(float), df['di√¢metro'].astype(float))
        plt.xlabel('Altura')
        plt.ylabel('Di√¢metro')
        plt.title('Gr√°fico de Dispers√£o entre Altura e Di√¢metro')
        st.pyplot(plt)
